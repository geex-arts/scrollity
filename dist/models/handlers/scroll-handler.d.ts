import { NgZone } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { ScrollService } from '../../services/scroll.service';
import { ScrollTriggerDirective } from '../../directives/scroll-trigger/scroll-trigger.directive';
import { ScrollSource } from '../sources/scroll-source.interface';
import { Subject } from 'rxjs/Subject';
export declare type ScrollHandlerOptions = {
    element: HTMLElement;
    horizontal?: boolean;
    translate?: boolean;
    initialPosition?: number;
    viewport?: any;
    overrideScroll?: boolean;
};
export declare abstract class ScrollHandler {
    abstract getInstantPosition(): number;
    abstract handleScrollEvent(deltaX: any, deltaY: any, duration: any): any;
    abstract scrollTo(position: any, duration: any, ease: any, cancellable: any): any;
    service: ScrollService;
    zone: NgZone;
    element: HTMLElement;
    enabled: boolean;
    horizontal: boolean;
    translate: boolean;
    initialPosition: number;
    viewport: any;
    overrideScroll: boolean;
    timeline: any;
    scrollListener: any;
    resizeListener: any;
    animatingScroll: boolean;
    instantPosition: number;
    _position: BehaviorSubject<number>;
    _scrollMapPosition: BehaviorSubject<{
        x: number;
        y: number;
    }>;
    _viewportSize: any;
    _contentSize: any;
    triggers: {
        trigger: ScrollTriggerDirective;
        activated: boolean;
    }[];
    previousScrollPosition: number;
    previousStickTo: ScrollTriggerDirective;
    scrollSourceHandlers: ScrollSource[];
    updateContentSizeInterval: any;
    _scrollOverflow: Subject<number>;
    constructor(options: ScrollHandlerOptions);
    onInit(): void;
    setInitialPosition(): void;
    addTrigger(trigger: any): void;
    removeTrigger(trigger: any): void;
    enable(): void;
    disable(): void;
    readonly handleAllowed: boolean;
    bind(): void;
    unbind(): void;
    handleScrollEndEvent(): void;
    handleResizeEvent(): void;
    readonly viewportSize: any;
    updateViewportSize(): void;
    readonly contentSize: any;
    updateContentSize(): void;
    updateTriggerPositions(): void;
    readonly position$: Observable<number>;
    readonly position: number;
    readonly scrollOverflow$: Observable<number>;
    normalizePosition(position: any): any;
    preventScroll(delta: any): boolean;
    getTriggerPosition(trigger: ScrollTriggerDirective): number;
    onScroll(): void;
}
