{"version":3,"sources":["../../../../src/models/handlers/map-scroll-handler/line-scroll-map-item.ts"],"names":[],"mappings":";;AASA;IAOE,2BAAY,OAAiC;QAC3C,IAAI,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC;QACxB,IAAI,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC;QACxB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,CAAC,CAAC;QACpC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,CAAC,CAAC;IACtC,CAAC;IAED,uCAAW,GAAX,UAAY,YAA0B;QACpC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;cACnB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;cAChB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,YAAY,CAAC,KAAK;cAC3C,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,YAAY,CAAC,MAAM,CAAC;IACnD,CAAC;IAED,uCAAW,GAAX,UAAY,YAA0B,EAAE,QAAgB;QACtD,EAAE,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;YACjB,QAAQ,GAAG,CAAC,CAAC;QACf,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;YACxB,QAAQ,GAAG,CAAC,CAAC;QACf,CAAC;QAED,MAAM,CAAC;YACL,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,GAAG,YAAY,CAAC,KAAK,CAAC,GAAG,QAAQ;YAC1D,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,GAAG,YAAY,CAAC,MAAM,CAAC,GAAG,QAAQ;SAC5D,CAAC;IACJ,CAAC;IAED,oDAAwB,GAAxB,UAAyB,CAAc;QACrC,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IAED,wCAAY,GAAZ;QACE,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC;IACnD,CAAC;IAED,2CAAe,GAAf;IAEA,CAAC;IACH,wBAAC;AAAD,CA7CA,AA6CC,IAAA;AA7CY,8CAAiB","file":"line-scroll-map-item.js","sourceRoot":"","sourcesContent":["import { ScrollMapItem, ScrollPosition, ViewportSize } from './scroll-map-item';\n\nexport type LineScrollMapItemOptions = {\n  x?: number,\n  y?: number,\n  xScreen?: number,\n  yScreen?: number\n};\n\nexport class LineScrollMapItem implements ScrollMapItem {\n\n  x: number;\n  y: number;\n  xScreen: number;\n  yScreen: number;\n\n  constructor(options: LineScrollMapItemOptions) {\n    this.x = options.x || 0;\n    this.y = options.y || 0;\n    this.xScreen = options.xScreen || 0;\n    this.yScreen = options.yScreen || 0;\n  }\n\n  getDistance(viewportSize: ViewportSize): number {\n    return Math.abs(this.x)\n      + Math.abs(this.y)\n      + Math.abs(this.xScreen) * viewportSize.width\n      + Math.abs(this.yScreen) * viewportSize.height;\n  }\n\n  getPosition(viewportSize: ViewportSize, progress: number): ScrollPosition {\n    if (progress > 1) {\n      progress = 1;\n    } else if (progress < 0) {\n      progress = 0;\n    }\n\n    return {\n      x: (this.x + this.xScreen * viewportSize.width) * progress,\n      y: (this.y + this.yScreen * viewportSize.height) * progress\n    };\n  }\n\n  getElementScrollPosition(_: HTMLElement): number {\n    return undefined;\n  }\n\n  getDirection(): number {\n    return this.y > 0 || this.yScreen > 0 ? 90 : 180;\n  }\n\n  onLayoutUpdated(): void {\n\n  }\n}\n"]}